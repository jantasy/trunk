apply plugin: 'com.android.application'


android {
    compileSdkVersion 19
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "cn.yjt.oa.app"
        minSdkVersion 9
        targetSdkVersion 19
        manifestPlaceholders = [ UMENG_CHANNEL_VALUE:"default_channel" ]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
    }

    signingConfigs {
    
        unsigned {
            storePassword ""
            keyAlias ""
            keyPassword ""
        }

        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
	
	release {
            storeFile file("D:/workspace/mykeystore/yijitong.keystore")
            storePassword "12345678"
            keyAlias "yijitong"
            keyPassword "@ctbri"
        }
    }

    buildTypes {
    
	unsigned {
            minifyEnabled true
	    signingConfig signingConfigs.unsigned
	    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }

        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                //output.outputFile = new File(output.outputFile.parent, name.replace(".apk", "-" + defaultConfig.versionName + ".apk"));
                if(variant.buildType.name.equals('release')){
                    def releaseApkName = 'YJTOA' + '-' + getVersionNameFromManifest() + '-' + variant.productFlavors[0].name + '-release.apk'
                    output.outputFile = new File(output.outputFile.parent, releaseApkName)
                }
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
        yjt189cn {}		//¹ÙÍø
        store360 {}		//360
        anzhi {}			//°²ÖÇ
        appchina {}		//Ó¦ÓÃ»ã
        baidu {}			//°Ù¶È 91 °²×¿ÊÐ³¡
        bestpay {}		//ÒíÖ§¸¶
        eoemarket {}	//ÓÅÒÚ
        gfan {}				//»ú·æ
        lenovo {}			//ÁªÏë
        nduoa {}			//N¶àÍø
        qq {}					//Ó¦ÓÃ±¦
        store163 {}		//ÍøÒ×
        store189 {}		//ÌìÒí¿Õ¼ä
        wandoujia {}	//Íã¶¹¼Ô
        xiaomi {}			//Ð¡Ã×
//      onlinedown {}	//»ª¾ü
//      appfun {}			//°²·Û
//      huawei {}			//»ªÎª
//      mumayi {}			//Ä¾ÂìÒÏ
//      uc {}					//PPÖúÊÖ UCÓ¦ÓÃÉÌµê ÉñÂí
//      sohu {}				//ËÑºü
//      store10086 {}	//ÖÐ¹úÒÆ¶¯Ó¦ÓÃÊÐ³¡

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }



}

dependencies {
    compile project(':floatwidgetlib')
    compile project(':QrCodeScan')
    compile project(':NFC_lib')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':sliddingmenu_library')
    provided fileTree(dir: 'lib', include: ['*.jar'])
    compile project(':TelecomppExtendLib')
    compile project(':viewpager_indicator_lib')
    compile 'com.android.support:support-v4:23.0.0'
    compile 'com.android.support:cardview-v7:22.0.0'
}


def getVersionNameFromManifest(){
    def manifestParser = new com.android.builder.core.DefaultManifestParser()
    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
}